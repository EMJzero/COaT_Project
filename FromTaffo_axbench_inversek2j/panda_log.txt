 ==  Bambu executed with: /tmp/.mount_bambu-SfedL3/usr/bin/bambu -v 2 --top-fname=test --compiler=I386_CLANG12 --simulate --simulator=VERILATOR --evaluation --device-name=xc7vx690t-3ffg1930-VVD ../test.c 


********************************************************************************
                    ____                  _
                   | __ )  __ _ _ __ ___ | |_   _   _
                   |  _ \ / _` | '_ ` _ \| '_ \| | | |
                   | |_) | (_| | | | | | | |_) | |_| |
                   |____/ \__,_|_| |_| |_|_.__/ \__,_|

********************************************************************************
                         High-Level Synthesis Tool

                         Politecnico di Milano - DEIB
                          System Architectures Group
********************************************************************************
                Copyright (C) 2004-2023 Politecnico di Milano
 Version: PandA 2023.1 - Revision 04336c437a53bc96ae90b74052c455629946ec8b-main

Parameters parsed in 0.14 seconds

Target technology = FPGA
Library Name     : STD_FU
  Total cells    : 3
  - combinational: 0
  - others: 3

Library Name     : STD_FU
  Total cells    : 10
  - combinational: 0
  - others: 10

Library Name     : STD_FU
  Total cells    : 33
  - combinational: 0
  - others: 33

Library Name     : STD_FU
  Total cells    : 8
  - combinational: 0
  - others: 8

Library Name     : STD_FU
  Total cells    : 56
  - combinational: 0
  - others: 56

Library Name     : STD_FU
  Total cells    : 1
  - combinational: 0
  - others: 1

Library Name     : CS_COMPONENT
  Total cells    : 16
  - combinational: 0
  - others: 16

Library Name     : STD_FU
  Total cells    : 2
  - combinational: 0
  - others: 2

Library Name     : STD_FU
  Total cells    : 0
  - combinational: 0
  - others: 0

Library Name     : STD_FU
  Total cells    : 3
  - combinational: 0
  - others: 3

Library Name     : STD_FU
  Total cells    : 21
  - combinational: 0
  - others: 21

Library Name     : STD
  Total cells    : 14
  - combinational: 0
  - others: 14

Library Name     : STD_COMMON
  Total cells    : 57
  - combinational: 0
  - others: 57

Library Name     : STD_FU
  Total cells    : 28
  - combinational: 0
  - others: 28

Library Name     : STD_PC
  Total cells    : 16
  - combinational: 0
  - others: 16

Library Name     : STD_SOFT_FLOAT
  Total cells    : 2
  - combinational: 0
  - others: 2

Library Name     : STD
  Total cells    : 72
  - combinational: 0
  - others: 72

Library Name     : STD_FU
  Total cells    : 2
  - combinational: 0
  - others: 2

Library Name     : STD_FU
  Total cells    : 9
  - combinational: 0
  - others: 9

Library Name     : WBWrapper
  Total cells    : 12
  - combinational: 0
  - others: 12

Available devices:
 - 5CSEMA5F31C6
 - 5SGXEA7N2F45C1
 - EP2C70F896C6
 - EP2C70F896C6-R
 - EP4SGX530KH40C2
 - LFE335EA8FN484C
 - LFE5U85F8BG756C
 - LFE5UM85F8BG756C
 - asap7-BC
 - asap7-TC
 - asap7-WC
 - nangate45
 - nx1h140tsp
 - nx1h35S
 - nx2h540tsc
 - xc4vlx100-10ff1513
 - xc5vlx110t-1ff1136
 - xc5vlx330t-2ff1738
 - xc5vlx50-3ff1153
 - xc6vlx240t-1ff1156
 - xc7a100t-1csg324-VVD
 - xc7vx330t-1ffg1157
 - xc7vx485t-2ffg1761-VVD
 - xc7vx690t-3ffg1930-VVD
 - xc7z020-1clg484
 - xc7z020-1clg484-VVD
 - xc7z020-1clg484-YOSYS-VVD
 - xc7z045-2ffg900-VVD
 - xcku060-3ffva1156-VVD
 - xcu280-2Lfsvh2892-VVD
Library Name     : STD_FU
  Total cells    : 3911
  - combinational: 0
  - others: 3911

!! Unknown ext. calls:
llvm.var.annotation
  Bit Value Opt: cond_expr optimized, nbits = 52
  Bit Value Opt: plus_expr optimized, nbits = 7
  Bit Value Opt: plus_expr optimized, nbits = 52
  Bit Value Opt: bit_and_expr optimized, nbits = 31
  Bit Value Opt: bit_and_expr optimized, nbits = 31
  Bit Value Opt: bit_and_expr optimized, nbits = 16
  Bit Value Opt: eq_expr optimized, nbits = 16
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: eq_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 27
  Bit Value Opt: bit_and_expr optimized, nbits = 29
  Bit Value Opt: bit_xor_expr optimized, nbits = 24
  Bit Value Opt: bit_and_expr optimized, nbits = 24
  Bit Value Opt: plus_expr optimized, nbits = 16
  Bit Value Opt: cond_expr optimized, nbits = 16
  Bit Value Opt: cond_expr optimized, nbits = 23
  Bit Value Opt: bit_and_expr optimized, nbits = 31
  Bit Value Opt: plus_expr optimized, nbits = 6
  Bit Value Opt: bit_and_expr optimized, nbits = 31
  Bit Value Opt: cond_expr optimized, nbits = 23
  Bit Value Opt: plus_expr optimized, nbits = 23
  Bit Value Opt: plus_expr optimized, nbits = 6
  Bit Value Opt: bit_and_expr optimized, nbits = 31
  Bit Value Opt: lt_expr optimized, nbits = 16
  Bit Value Opt: bit_and_expr optimized, nbits = 31
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 4
  Bit Value Opt: cond_expr optimized, nbits = 5
  Bit Value Opt: bit_xor_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: ne_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 24
  Bit Value Opt: eq_expr optimized, nbits = 24
  Bit Value Opt: bit_and_expr optimized, nbits = 40
  Bit Value Opt: eq_expr optimized, nbits = 40
  Bit Value Opt: bit_and_expr optimized, nbits = 48
  Bit Value Opt: eq_expr optimized, nbits = 48
  Bit Value Opt: bit_and_expr optimized, nbits = 52
  Bit Value Opt: eq_expr optimized, nbits = 52
  Bit Value Opt: bit_and_expr optimized, nbits = 54
  Bit Value Opt: eq_expr optimized, nbits = 54
  Bit Value Opt: bit_and_expr optimized, nbits = 55
  Bit Value Opt: eq_expr optimized, nbits = 55
  Bit Value Opt: bit_and_expr optimized, nbits = 55
  Bit Value Opt: ne_expr optimized, nbits = 55
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 4
  Bit Value Opt: cond_expr optimized, nbits = 5
  Bit Value Opt: bit_xor_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: ne_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 11
  Bit Value Opt: eq_expr optimized, nbits = 11
  Bit Value Opt: bit_and_expr optimized, nbits = 19
  Bit Value Opt: eq_expr optimized, nbits = 19
  Bit Value Opt: bit_and_expr optimized, nbits = 23
  Bit Value Opt: eq_expr optimized, nbits = 23
  Bit Value Opt: bit_and_expr optimized, nbits = 25
  Bit Value Opt: eq_expr optimized, nbits = 25
  Bit Value Opt: bit_and_expr optimized, nbits = 26
  Bit Value Opt: eq_expr optimized, nbits = 26
  Bit Value Opt: bit_and_expr optimized, nbits = 26
  Bit Value Opt: ne_expr optimized, nbits = 26
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: minus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: eq_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 5
  Bit Value Opt: plus_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 5
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: eq_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 5
  Bit Value Opt: plus_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 5
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_xor_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: minus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 51
  Bit Value Opt: ne_expr optimized, nbits = 51
  Bit Value Opt: bit_and_expr optimized, nbits = 4
  Bit Value Opt: bit_and_expr optimized, nbits = 4
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 4
  Bit Value Opt: bit_and_expr optimized, nbits = 4
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: minus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 55
  Bit Value Opt: ne_expr optimized, nbits = 55
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: minus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: eq_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 5
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: eq_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 4
  Bit Value Opt: plus_expr optimized, nbits = 5
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_xor_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: minus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 22
  Bit Value Opt: ne_expr optimized, nbits = 22
  Bit Value Opt: bit_and_expr optimized, nbits = 9
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 9
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: minus_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 26
  Bit Value Opt: ne_expr optimized, nbits = 26
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: bit_xor_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: ne_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 51
  Bit Value Opt: ne_expr optimized, nbits = 51
  Bit Value Opt: bit_and_expr optimized, nbits = 41
  Bit Value Opt: ne_expr optimized, nbits = 41
  Bit Value Opt: bit_and_expr optimized, nbits = 12
  Bit Value Opt: ne_expr optimized, nbits = 12
  Bit Value Opt: bit_and_expr optimized, nbits = 53
  Bit Value Opt: ne_expr optimized, nbits = 53
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: bit_xor_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 1
  Bit Value Opt: ne_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: bit_and_expr optimized, nbits = 22
  Bit Value Opt: ne_expr optimized, nbits = 22
  Bit Value Opt: bit_and_expr optimized, nbits = 47
  Bit Value Opt: ne_expr optimized, nbits = 47
  Bit Value Opt: bit_and_expr optimized, nbits = 9
  Bit Value Opt: ne_expr optimized, nbits = 9
  Bit Value Opt: bit_and_expr optimized, nbits = 24
  Bit Value Opt: ne_expr optimized, nbits = 24
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 4
  Bit Value Opt: cond_expr optimized, nbits = 5
  Bit Value Opt: bit_xor_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: ne_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 24
  Bit Value Opt: eq_expr optimized, nbits = 24
  Bit Value Opt: bit_and_expr optimized, nbits = 40
  Bit Value Opt: eq_expr optimized, nbits = 40
  Bit Value Opt: bit_and_expr optimized, nbits = 48
  Bit Value Opt: eq_expr optimized, nbits = 48
  Bit Value Opt: bit_and_expr optimized, nbits = 52
  Bit Value Opt: eq_expr optimized, nbits = 52
  Bit Value Opt: bit_and_expr optimized, nbits = 54
  Bit Value Opt: eq_expr optimized, nbits = 54
  Bit Value Opt: bit_and_expr optimized, nbits = 55
  Bit Value Opt: eq_expr optimized, nbits = 55
  Bit Value Opt: bit_and_expr optimized, nbits = 55
  Bit Value Opt: ne_expr optimized, nbits = 55
  Bit Value Opt: cond_expr optimized, nbits = 1
  Bit Value Opt: plus_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 2
  Bit Value Opt: cond_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 4
  Bit Value Opt: cond_expr optimized, nbits = 5
  Bit Value Opt: bit_xor_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: ne_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 11
  Bit Value Opt: eq_expr optimized, nbits = 11
  Bit Value Opt: bit_and_expr optimized, nbits = 19
  Bit Value Opt: eq_expr optimized, nbits = 19
  Bit Value Opt: bit_and_expr optimized, nbits = 23
  Bit Value Opt: eq_expr optimized, nbits = 23
  Bit Value Opt: bit_and_expr optimized, nbits = 25
  Bit Value Opt: eq_expr optimized, nbits = 25
  Bit Value Opt: bit_and_expr optimized, nbits = 26
  Bit Value Opt: eq_expr optimized, nbits = 26
  Bit Value Opt: bit_and_expr optimized, nbits = 26
  Bit Value Opt: ne_expr optimized, nbits = 26
  Bit Value Opt: plus_expr optimized, nbits = 3
  Bit Value Opt: lt_expr optimized, nbits = 3
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: lt_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 2
  Bit Value Opt: lt_expr optimized, nbits = 2
  Bit Value Opt: plus_expr optimized, nbits = 11
  Bit Value Opt: eq_expr optimized, nbits = 1
  Bit Value Opt: eq_expr optimized, nbits = 1
  Bit Value Opt: cond_expr optimized, nbits = 29
  Bit Value Opt: cond_expr optimized, nbits = 29
  Bit Value Opt: cond_expr optimized, nbits = 29
  Bit Value Opt: cond_expr optimized, nbits = 6
  Bit Value Opt: cond_expr optimized, nbits = 52
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 3
  Bit Value Opt: cond_expr optimized, nbits = 23
  Bit Value Opt: bit_and_expr optimized, nbits = 2
  Bit Value Opt: bit_and_expr optimized, nbits = 3
Function call to __float_sube11m52b_1023nih inlined in test

  Functions to be synthesized:
    __float32_to_float64_ieee
    __float64_to_float32_ieee
    test
    __float_mule11m52b_1023nih
    __float_adde8m23b_127nih
    __float_adde11m52b_1023nih
    __float_mule8m23b_127nih
    __float_sube8m23b_127nih
    __float_divSRT4e8m23b_127nih
    __float_divSRT4e11m52b_1023nih


  Memory allocation information:
  Sparse memory alignemnt set to 2048 bytes
    Internal variable: l1 - 424814 - l1 in function test
      Id: 424814
      Base Address: 2048
      Size: 4
      Is a private memory
      Is a Read Only Memory
      The variable is always accessed with the same data size
      Number of functions in which is used: 1
      Maximum number of references per function: 4
      Maximum number of loads per function: 4
    Internal variable: l2 - 424962 - l2 in function test
      Id: 424962
      Base Address: 2048
      Size: 4
      Is a private memory
      Is a Read Only Memory
      The variable is always accessed with the same data size
      Number of functions in which is used: 1
      Maximum number of references per function: 5
      Maximum number of loads per function: 5
    Internal variable: internal_425013 - 425013 - internal_425013 in function test
      Id: 425013
      Base Address: 2048
      Size: 1600
      Is a private memory
      The variable is always accessed with the same data size
      Number of functions in which is used: 1
      Maximum number of references per function: 19
      Maximum number of loads per function: 11
    Internal variable: internal_425072 - 425072 - internal_425072 in function test
      Id: 425072
      Base Address: 2048
      Size: 4
      Is a private memory
      The variable is always accessed with the same data size
      Number of functions in which is used: 1
      Maximum number of references per function: 2
      Maximum number of loads per function: 1
Warning: This function uses unknown addresses: test
    BRAM bitsize: 16
    Spec may not exploit DATA bus width
    Spec accesses data having an address unknown at compile time
    Internal data is not externally accessible
    DATA bus bitsize: 32
    ADDRESS bus bitsize: 32
    SIZE bus bitsize: 6
    Internally allocated memory (no private memories): 0
    Internally allocated memory: 1612
  Time to perform memory allocation: 0.00 seconds


  Module allocation information for function __float32_to_float64_ieee:
    Number of complex operations: 0
    Number of complex operations: 0
  Time to perform module allocation: 0.02 seconds


  Module allocation information for function __float64_to_float32_ieee:
    Number of complex operations: 0
    Number of complex operations: 0
  Time to perform module allocation: 0.03 seconds


  Module allocation information for function __float_adde11m52b_1023nih:
    Number of complex operations: 0
    Number of complex operations: 0
  Time to perform module allocation: 0.04 seconds


  Module allocation information for function __float_adde8m23b_127nih:
    Number of complex operations: 0
    Number of complex operations: 0
  Time to perform module allocation: 0.04 seconds


  Module allocation information for function __float_divSRT4e11m52b_1023nih:
    Number of complex operations: 0
    Number of complex operations: 0
  Time to perform module allocation: 0.04 seconds


  Module allocation information for function __float_divSRT4e8m23b_127nih:
    Number of complex operations: 0
    Number of complex operations: 0
  Time to perform module allocation: 0.04 seconds


  Module allocation information for function __float_mule11m52b_1023nih:
    Number of complex operations: 4
    Number of complex operations: 4
  Time to perform module allocation: 0.03 seconds


  Module allocation information for function __float_mule8m23b_127nih:
    Number of complex operations: 1
    Number of complex operations: 1
  Time to perform module allocation: 0.02 seconds


  Module allocation information for function __float_sube8m23b_127nih:
    Number of complex operations: 0
    Number of complex operations: 0
  Time to perform module allocation: 0.04 seconds


  Scheduling Information of function __float32_to_float64_ieee:
    Number of control steps: 3
    Minimum slack: 7.8356666596666633
    Estimated max frequency (MHz): 462.03603731668545
  Time to perform scheduling: 0.00 seconds

  Number of function call sites = 16

  State Transition Graph Information of function __float32_to_float64_ieee:
    Number of operations: 79
    Number of basic blocks: 3
    Number of states: 1
    Minimum number of cycles: 1
    Maximum number of cycles 1
  Time to perform creation of STG: 0.00 seconds


  Scheduling Information of function __float64_to_float32_ieee:
    Number of control steps: 5
    Minimum slack: 5.756175992000002
    Estimated max frequency (MHz): 235.63653867712426
  Time to perform scheduling: 0.01 seconds

  Number of function call sites = 4

  State Transition Graph Information of function __float64_to_float32_ieee:
    Number of operations: 105
    Number of basic blocks: 5
    Number of states: 3
    Minimum number of cycles: 2
    Maximum number of cycles 2
    Done port is registered
  Time to perform creation of STG: 0.00 seconds


  Scheduling Information of function __float_adde11m52b_1023nih:
    Number of control steps: 4
    Minimum slack: 0.11253464066666591
    Estimated max frequency (MHz): 101.13815458842987
  Time to perform scheduling: 0.05 seconds

  Number of function call sites = 3

  State Transition Graph Information of function __float_adde11m52b_1023nih:
    Number of operations: 438
    Number of basic blocks: 3
    Number of states: 3
    Minimum number of cycles: 3
    Maximum number of cycles 3
    Parameters are registered
    Done port is registered
  Time to perform creation of STG: 0.01 seconds


  Scheduling Information of function __float_adde8m23b_127nih:
    Number of control steps: 4
    Minimum slack: 0.14211997399999216
    Estimated max frequency (MHz): 101.44168902061249
  Time to perform scheduling: 0.03 seconds

  Number of function call sites = 3

  State Transition Graph Information of function __float_adde8m23b_127nih:
    Number of operations: 400
    Number of basic blocks: 3
    Number of states: 3
    Minimum number of cycles: 3
    Maximum number of cycles 3
    Parameters are registered
    Done port is registered
  Time to perform creation of STG: 0.01 seconds


  Scheduling Information of function __float_divSRT4e11m52b_1023nih:
    Number of control steps: 5
    Minimum slack: 2.7191333143333831
    Estimated max frequency (MHz): 137.34628625581581
  Time to perform scheduling: 0.02 seconds

  Number of function call sites = 1

  State Transition Graph Information of function __float_divSRT4e11m52b_1023nih:
    Number of operations: 229
    Number of basic blocks: 5
    Number of states: 3
    Done port is registered
  Time to perform creation of STG: 0.00 seconds


  Scheduling Information of function __float_divSRT4e8m23b_127nih:
    Number of control steps: 5
    Minimum slack: 3.6121333143333838
    Estimated max frequency (MHz): 156.54678615066362
  Time to perform scheduling: 0.03 seconds

  Number of function call sites = 1

  State Transition Graph Information of function __float_divSRT4e8m23b_127nih:
    Number of operations: 261
    Number of basic blocks: 5
    Number of states: 3
    Done port is registered
  Time to perform creation of STG: 0.00 seconds


  Scheduling Information of function __float_mule11m52b_1023nih:
    Number of control steps: 4
    Minimum slack: 0.048433324333333971
    Estimated max frequency (MHz): 100.4866904469601
  Time to perform scheduling: 0.01 seconds

  Number of function call sites = 7

  State Transition Graph Information of function __float_mule11m52b_1023nih:
    Number of operations: 110
    Number of basic blocks: 3
    Number of states: 3
    Minimum number of cycles: 3
    Maximum number of cycles 3
    Parameters are registered
    Done port is registered
  Time to perform creation of STG: 0.00 seconds


  Scheduling Information of function __float_mule8m23b_127nih:
    Number of control steps: 4
    Minimum slack: 0.14046665266666675
    Estimated max frequency (MHz): 101.4246785087923
  Time to perform scheduling: 0.01 seconds

  Number of function call sites = 7

  State Transition Graph Information of function __float_mule8m23b_127nih:
    Number of operations: 124
    Number of basic blocks: 3
    Number of states: 3
    Minimum number of cycles: 3
    Maximum number of cycles 3
    Parameters are registered
    Done port is registered
  Time to perform creation of STG: 0.00 seconds


  Scheduling Information of function __float_sube8m23b_127nih:
    Number of control steps: 4
    Minimum slack: 0.14211997399999216
    Estimated max frequency (MHz): 101.44168902061249
  Time to perform scheduling: 0.04 seconds

  Number of function call sites = 2

  State Transition Graph Information of function __float_sube8m23b_127nih:
    Number of operations: 400
    Number of basic blocks: 3
    Number of states: 3
    Minimum number of cycles: 3
    Maximum number of cycles 3
    Parameters are registered
    Done port is registered
  Time to perform creation of STG: 0.01 seconds


  Easy binding information for function __float32_to_float64_ieee:
    Bound operations:55/79
  Time to perform easy binding: 0.00 seconds


  Easy binding information for function __float64_to_float32_ieee:
    Bound operations:71/105
  Time to perform easy binding: 0.00 seconds


  Easy binding information for function __float_adde11m52b_1023nih:
    Bound operations:375/438
  Time to perform easy binding: 0.00 seconds


  Easy binding information for function __float_adde8m23b_127nih:
    Bound operations:345/400
  Time to perform easy binding: 0.00 seconds


  Easy binding information for function __float_divSRT4e11m52b_1023nih:
    Bound operations:139/229
  Time to perform easy binding: 0.00 seconds


  Easy binding information for function __float_divSRT4e8m23b_127nih:
    Bound operations:181/261
  Time to perform easy binding: 0.00 seconds


  Easy binding information for function __float_mule11m52b_1023nih:
    Bound operations:60/110
  Time to perform easy binding: 0.00 seconds


  Easy binding information for function __float_mule8m23b_127nih:
    Bound operations:105/124
  Time to perform easy binding: 0.00 seconds


  Easy binding information for function __float_sube8m23b_127nih:
    Bound operations:345/400
  Time to perform easy binding: 0.00 seconds


  Storage Value Information of function __float32_to_float64_ieee:
    Number of storage values inserted: 0
  Time to compute storage value information: 0.00 seconds


  Storage Value Information of function __float64_to_float32_ieee:
    Number of storage values inserted: 13
  Time to compute storage value information: 0.00 seconds


  Storage Value Information of function __float_adde11m52b_1023nih:
    Number of storage values inserted: 206
  Time to compute storage value information: 0.00 seconds


  Storage Value Information of function __float_adde8m23b_127nih:
    Number of storage values inserted: 47
  Time to compute storage value information: 0.00 seconds


  Storage Value Information of function __float_divSRT4e11m52b_1023nih:
    Number of storage values inserted: 22
  Time to compute storage value information: 0.00 seconds


  Storage Value Information of function __float_divSRT4e8m23b_127nih:
    Number of storage values inserted: 22
  Time to compute storage value information: 0.00 seconds


  Storage Value Information of function __float_mule11m52b_1023nih:
    Number of storage values inserted: 15
  Time to compute storage value information: 0.00 seconds


  Storage Value Information of function __float_mule8m23b_127nih:
    Number of storage values inserted: 6
  Time to compute storage value information: 0.00 seconds


  Storage Value Information of function __float_sube8m23b_127nih:
    Number of storage values inserted: 47
  Time to compute storage value information: 0.00 seconds

  Slack computed in 0.00 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float32_to_float64_ieee:
    Register allocation algorithm obtains an optimal result: 0 registers
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float32_to_float64_ieee:
    Number of modules instantiated: 79
    Number of performance conflicts: 0
    Estimated resources area (no Muxes and address logic): 801
    Estimated area of MUX21: 0
    Total estimated area: 801
    Estimated number of DSPs: 0
  Time to perform module binding: 0.00 seconds


  Register binding information for function __float32_to_float64_ieee:
    Register allocation algorithm obtains an optimal result: 0 registers
  Time to perform register binding: 0.00 seconds

  Total number of flip-flops in function __float32_to_float64_ieee: 0
  Slack computed in 0.00 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float64_to_float32_ieee:
    Register allocation algorithm obtains a sub-optimal result: 13 registers(LB:12)
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float64_to_float32_ieee:
    Number of modules instantiated: 105
    Number of performance conflicts: 0
    Estimated resources area (no Muxes and address logic): 829
    Estimated area of MUX21: 0
    Total estimated area: 829
    Estimated number of DSPs: 0
  Time to perform module binding: 0.00 seconds


  Register binding information for function __float64_to_float32_ieee:
    Register allocation algorithm obtains a sub-optimal result: 13 registers(LB:12)
  Time to perform register binding: 0.00 seconds


  Connection Binding Information for function __float64_to_float32_ieee:
    Number of allocated multiplexers (2-to-1 equivalent): 1
  Time to perform interconnection binding: 0.01 seconds

  Total number of flip-flops in function __float64_to_float32_ieee: 310
  All registers are without enable: function pipelining may come for free
  Resources are not shared in function __float64_to_float32_ieee: function pipelining may come for free
  Slack computed in 0.01 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float_adde11m52b_1023nih:
    Register allocation algorithm obtains an optimal result: 206 registers
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float_adde11m52b_1023nih:
    Number of modules instantiated: 438
    Number of performance conflicts: 31
    Estimated resources area (no Muxes and address logic): 5660
    Estimated area of MUX21: 0
    Total estimated area: 5660
    Estimated number of DSPs: 0
  Time to perform module binding: 0.01 seconds


  Register binding information for function __float_adde11m52b_1023nih:
    Register allocation algorithm obtains an optimal result: 206 registers
  Time to perform register binding: 0.00 seconds

  Total number of flip-flops in function __float_adde11m52b_1023nih: 400
  All registers are without enable: function pipelining may come for free
  Resources are not shared in function __float_adde11m52b_1023nih: function pipelining may come for free
  Slack computed in 0.00 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float_adde8m23b_127nih:
    Register allocation algorithm obtains an optimal result: 47 registers
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float_adde8m23b_127nih:
    Number of modules instantiated: 400
    Number of performance conflicts: 28
    Estimated resources area (no Muxes and address logic): 4806
    Estimated area of MUX21: 0
    Total estimated area: 4806
    Estimated number of DSPs: 0
  Time to perform module binding: 0.01 seconds


  Register binding information for function __float_adde8m23b_127nih:
    Register allocation algorithm obtains an optimal result: 47 registers
  Time to perform register binding: 0.00 seconds

  Total number of flip-flops in function __float_adde8m23b_127nih: 189
  All registers are without enable: function pipelining may come for free
  Resources are not shared in function __float_adde8m23b_127nih: function pipelining may come for free
  Slack computed in 0.00 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float_divSRT4e11m52b_1023nih:
    Register allocation algorithm obtains a sub-optimal result: 19 registers(LB:18)
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float_divSRT4e11m52b_1023nih:
    Number of modules instantiated: 229
    Number of performance conflicts: 10
    Estimated resources area (no Muxes and address logic): 2963
    Estimated area of MUX21: 0
    Total estimated area: 2963
    Estimated number of DSPs: 0
  Time to perform module binding: 0.00 seconds


  Register binding information for function __float_divSRT4e11m52b_1023nih:
    Register allocation algorithm obtains a sub-optimal result: 19 registers(LB:18)
  Time to perform register binding: 0.00 seconds


  Connection Binding Information for function __float_divSRT4e11m52b_1023nih:
    Number of allocated multiplexers (2-to-1 equivalent): 4
  Time to perform interconnection binding: 0.01 seconds

  Total number of flip-flops in function __float_divSRT4e11m52b_1023nih: 847
  Slack computed in 0.01 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float_divSRT4e8m23b_127nih:
    Register allocation algorithm obtains a sub-optimal result: 19 registers(LB:18)
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float_divSRT4e8m23b_127nih:
    Number of modules instantiated: 261
    Number of performance conflicts: 0
    Estimated resources area (no Muxes and address logic): 2471
    Estimated area of MUX21: 0
    Total estimated area: 2471
    Estimated number of DSPs: 0
  Time to perform module binding: 0.01 seconds


  Register binding information for function __float_divSRT4e8m23b_127nih:
    Register allocation algorithm obtains a sub-optimal result: 19 registers(LB:18)
  Time to perform register binding: 0.00 seconds


  Connection Binding Information for function __float_divSRT4e8m23b_127nih:
    Number of allocated multiplexers (2-to-1 equivalent): 4
  Time to perform interconnection binding: 0.00 seconds

  Total number of flip-flops in function __float_divSRT4e8m23b_127nih: 481
  Slack computed in 0.00 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float_mule11m52b_1023nih:
    Register allocation algorithm obtains an optimal result: 15 registers
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float_mule11m52b_1023nih:
    Number of modules instantiated: 110
    Number of performance conflicts: 5
    Estimated resources area (no Muxes and address logic): 1587
    Estimated area of MUX21: 0
    Total estimated area: 1587
    Estimated number of DSPs: 12
  Time to perform module binding: 0.00 seconds


  Register binding information for function __float_mule11m52b_1023nih:
    Register allocation algorithm obtains an optimal result: 15 registers
  Time to perform register binding: 0.00 seconds

  Total number of flip-flops in function __float_mule11m52b_1023nih: 259
  All registers are without enable: function pipelining may come for free
  Resources are not shared in function __float_mule11m52b_1023nih: function pipelining may come for free
  Slack computed in 0.00 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float_mule8m23b_127nih:
    Register allocation algorithm obtains an optimal result: 6 registers
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float_mule8m23b_127nih:
    Number of modules instantiated: 124
    Number of performance conflicts: 0
    Estimated resources area (no Muxes and address logic): 1401
    Estimated area of MUX21: 0
    Total estimated area: 1401
    Estimated number of DSPs: 3
  Time to perform module binding: 0.00 seconds


  Register binding information for function __float_mule8m23b_127nih:
    Register allocation algorithm obtains an optimal result: 6 registers
  Time to perform register binding: 0.00 seconds

  Total number of flip-flops in function __float_mule8m23b_127nih: 99
  All registers are without enable: function pipelining may come for free
  Resources are not shared in function __float_mule8m23b_127nih: function pipelining may come for free
  Slack computed in 0.00 seconds
  Weight computation completed in 0.00 seconds
  False-loop computation completed in 0.00 seconds
  Iteration 0 completed in 0.00 seconds

  Register binding information for function __float_sube8m23b_127nih:
    Register allocation algorithm obtains an optimal result: 47 registers
  Time to perform register binding: 0.00 seconds

  Iteration 1 completed in 0.00 seconds
  Clique covering computation completed in 0.00 seconds

  Module binding information for function __float_sube8m23b_127nih:
    Number of modules instantiated: 400
    Number of performance conflicts: 28
    Estimated resources area (no Muxes and address logic): 4806
    Estimated area of MUX21: 0
    Total estimated area: 4806
    Estimated number of DSPs: 0
  Time to perform module binding: 0.01 seconds


  Register binding information for function __float_sube8m23b_127nih:
    Register allocation algorithm obtains an optimal result: 47 registers
  Time to perform register binding: 0.00 seconds

  Total number of flip-flops in function __float_sube8m23b_127nih: 189
  All registers are without enable: function pipelining may come for free
  Resources are not shared in function __float_sube8m23b_127nih: function pipelining may come for free

  Module allocation information for function test:
    Operation for which does not exist a functional unit in the resource library: sin in vertex: test_424770_425103 with vertex type: REAL and vertex prec: 64 64
    Operation for which does not exist a functional unit in the resource library: sin in vertex: test_424770_425111 with vertex type: REAL and vertex prec: 64 64
    Operation for which does not exist a functional unit in the resource library: sin in vertex: test_424770_425275 with vertex type: REAL and vertex prec: 64 64
    Operation for which does not exist a functional unit in the resource library: cos in vertex: test_424770_425082 with vertex type: REAL and vertex prec: 64 64
    Operation for which does not exist a functional unit in the resource library: cos in vertex: test_424770_425092 with vertex type: REAL and vertex prec: 64 64
    Operation for which does not exist a functional unit in the resource library: cos in vertex: test_424770_425265 with vertex type: REAL and vertex prec: 64 64
    Operation for which does not exist a functional unit in the resource library: acos in vertex: test_424770_425253 with vertex type: REAL and vertex prec: 64 64
    Operation for which does not exist a functional unit in the resource library: asin in vertex: test_424770_425281 with vertex type: REAL and vertex prec: 64 64
error -> Vertices not completely allocated

Please report bugs to <panda-info@polimi.it>

